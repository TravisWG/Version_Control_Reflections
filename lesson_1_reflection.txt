How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    You could compare items that would likely have been changed and see where the error was more easily.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Seeing how a file evolves could perhaps help one be more efficient by allowing them to see the errors that were made during the early stages of development.  It could also make it easier to return to previously stored versions in case an error is made in the newest version.sigt

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    A pro to manually choosing would be that you can commit based on a certain outcome in the program that you want to take place.  A pro of automatic saves would be that you can't forget to save your work and you would have a large history of commits.  A con of saving would be that you have a large, unorganized history of commits.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Files work synergistically in many projects.  I change to one file, but not another may render the how program broken.

How can you use the commands git log and git diff to view the history of files?

    The commands will show you commit history and the differences between the files.

How might using version control make you more confident to make changes that
could break something?

    You can always revert to an old commit.

Now that you have your workspace set up, what do you want to try using Git for?

    To create a 'reflections' folder to store my documents.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	The pros of manual editing is that you can pick a more logical time to save a commit as opposed to auto saving which does it based on some other parameter.  A con is that you must remember to save a commit and can even do this too infrequently.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	A version control system like Git is designed for programmers working on files that interact with each other.  A change in one might significantly alter the effectiveness of another file.  Because these files work together, it's best to save all files in a working commit.  A system like Google Docs is not designed for programmers working with multiple interactiing files.

How can you use the commands git log and git diff to view the history of files?
	
	You can use git log to see all the different versions of the repository and get diff to compare to different versions against each other to see what changes were made and how the differ.

How might using version control make you more confident to make changes that could break something?
    
    Because it is easy to just revert back to a working version of code and trouble shoot when and why the bug is present in the current code.

Now that you have your workspace set up, what do you want to try using Git for?
    
    Committing webpages to a git repository for my Front End Web Developer Nanodegree program.	